# -*- coding: utf-8 -*-
"""
Based on https://github.com/Guanghan/darknet/blob/master/scripts/convert.py

Created on Wed Oct  19 14:55:43 2017
Converting Text annotations generated by bounding box tool,modified to work on complete dataset at one run
@author: Ishara Upamal
Email: isharaux@gmail.com
"""

import os
from os import walk, getcwd,listdir
from os.path import isfile,join
from PIL import Image

classes = ["Crow","Flycatcher","Gull","Kingfisher","Pelican"]

def convert(size, box):
    dw = 1./size[0]
    dh = 1./size[1]
    x = (box[0] + box[1])/2.0
    y = (box[2] + box[3])/2.0
    w = box[1] - box[0]
    h = box[3] - box[2]
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return (x,y,w,h)


"""-------------------------------------------------------------------"""

""" Configure Paths"""
original_label_path = "labels/"
darknet_label_path = "labels_out/"
image_path = "images/"

getfolders = [f for f in listdir(original_label_path)]
for folder in getfolders:
    labels_path = original_label_path + folder + "/"
    output_label_path = darknet_label_path + folder + "/"
    for l in listdir(labels_path):
        if isfile(join(labels_path, l)):
            class_no = classes.index(l.split("_")[0])
            labels_path = original_label_path + folder + "/" + l
            if not os.path.exists(output_label_path):
                os.makedirs(output_label_path)
            output_label_path = output_label_path + l#get the output path
            pic_path = image_path + folder + "/" + l.replace("txt","JPEG")

            output = open(output_label_path, "w")

            im=Image.open(pic_path)
            w= int(im.size[0])
            h= int(im.size[1])

            with open(labels_path) as f:
                i = 0
                line = f.readlines()
                for l in line:
                    if i == 0:
                        no_of_objects = l
                        i = i + 1
                    else:
                        elems = l.split(' ')
                        xmin = elems[0].rstrip('\n')
                        xmax = elems[2].rstrip('\n')
                        ymin = elems[1].rstrip('\n')
                        ymax = elems[3].rstrip('\n')
                        print(xmin,xmax,ymin,ymax)
                        b = (float(xmin), float(xmax), float(ymin), float(ymax))
                        bb = convert((w,h), b)
                        print(bb)
                        output.write(str(class_no) + " " + " ".join([str(a) for a in bb]) + '\n')

                        i = i + 1
            output_label_path = darknet_label_path + folder + "/"
            labels_path = original_label_path + folder + "/"
            pic_path = image_path + folder + "/"
